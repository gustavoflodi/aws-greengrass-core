#!/usr/bin/env python3
import json
import time
import logging
import sys
import traceback
import os
import random
from datetime import datetime
from pathlib import Path

import torch
from PIL import Image, ImageDraw, ImageFont
import cv2
import numpy as np

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

try:
    # Imports espec√≠ficos do Greengrass IPC
    import awsiot.greengrasscoreipc
    from awsiot.greengrasscoreipc.model import (
        PublishToIoTCoreRequest,
        QOS
    )
    logger.info("‚úÖ Imports do Greengrass IPC realizados com sucesso")
except ImportError as e:
    logger.error(f"‚ùå Erro ao importar m√≥dulos do Greengrass: {e}")
    sys.exit(1)

class GreengrassCarCounter:
    def __init__(self):
        self.ipc_client = None
        self.component_name = "com.example.CarCounterGreengrass"
        self.topic = "greengrass/v2/car-counter/results"
        
        # Configura√ß√µes do contador de carros
        self.base_dir = "/greengrass/v2/packages/artifacts/com.example.CarCounterGreengrass/1.0.6/data/images"
        self.results_dir = "/greengrass/v2/packages/artifacts/com.example.CarCounterGreengrass/1.0.6/data/results"
        self.model = None
        
        # ‚úÖ Configurar cache do PyTorch em diret√≥rio com permiss√£o
        self.cache_dir = "/tmp/pytorch_cache"
        self.setup_cache_directory()
        
        # Classes de ve√≠culos que vamos contar (IDs do COCO dataset)
        # 2: car, 3: motorcycle, 5: bus, 7: truck
        self.vehicle_classes = {
            2: 'car',
            3: 'motorcycle', 
            5: 'bus',
            7: 'truck'
        }
        
    def setup_cache_directory(self):
        """Configura diret√≥rio de cache do PyTorch com permiss√µes corretas"""
        try:
            os.makedirs(self.cache_dir, exist_ok=True)
            os.makedirs(self.results_dir, exist_ok=True)
            
            # Configurar vari√°veis de ambiente para PyTorch usar nosso cache
            os.environ['TORCH_HOME'] = self.cache_dir
            os.environ['TORCH_CACHE'] = self.cache_dir
            
            logger.info(f"‚úÖ Diret√≥rios configurados - Cache: {self.cache_dir}, Resultados: {self.results_dir}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar diret√≥rios: {e}")
            # Tentar usar /tmp como fallback
            self.cache_dir = "/tmp"
            self.results_dir = "/tmp/results"
            os.environ['TORCH_HOME'] = self.cache_dir
            logger.info(f"‚ö†Ô∏è Usando /tmp como diret√≥rio de cache: {self.cache_dir}")
        
    def connect_ipc(self):
        """Estabelece conex√£o IPC com o Greengrass Core"""
        try:
            logger.info("üîÑ Tentando estabelecer conex√£o IPC...")
            
            self.ipc_client = awsiot.greengrasscoreipc.connect()
            
            logger.info("‚úÖ Conex√£o IPC estabelecida com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao estabelecer conex√£o IPC: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    def load_yolo_model(self):
        """Carrega o modelo YOLOv5 para detec√ß√£o de objetos"""
        try:
            logger.info("üîÑ Carregando modelo YOLOv5 para detec√ß√£o de carros...")
            logger.info(f"üìÅ Cache directory: {os.environ.get('TORCH_HOME', 'default')}")
            
            # Carregar YOLOv5s (vers√£o pequena e r√°pida)
            self.model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
            self.model.eval()
            
            # Configurar confian√ßa m√≠nima
            self.model.conf = 0.5  # Confian√ßa m√≠nima de 50%
            self.model.iou = 0.45   # IoU threshold para NMS
            
            logger.info("‚úÖ Modelo YOLOv5 carregado com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar modelo YOLO: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # Fallback: tentar carregar modelo local se dispon√≠vel
            try:
                logger.info("üîÑ Tentando carregar modelo YOLOv5 local...")
                self.model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=False)
                logger.warning("‚ö†Ô∏è Modelo carregado sem pesos pr√©-treinados - detec√ß√µes n√£o funcionar√£o corretamente")
                return True
            except Exception as e2:
                logger.error(f"‚ùå Erro tamb√©m no fallback: {e2}")
                return False
    
    def detect_vehicles(self, image_path):
        """Detecta ve√≠culos em uma imagem usando YOLOv5"""
        try:
            # Carregar imagem
            img = Image.open(image_path).convert("RGB")
            
            # Fazer detec√ß√£o
            results = self.model(img)
            
            # Processar resultados
            detections = results.pandas().xyxy[0]  # Resultados em formato pandas
            
            # Filtrar apenas ve√≠culos
            vehicle_detections = detections[detections['class'].isin(self.vehicle_classes.keys())]
            
            # Contar por tipo de ve√≠culo
            vehicle_counts = {}
            total_vehicles = 0
            
            for class_id in self.vehicle_classes.keys():
                count = len(vehicle_detections[vehicle_detections['class'] == class_id])
                vehicle_name = self.vehicle_classes[class_id]
                vehicle_counts[vehicle_name] = count
                total_vehicles += count
            
            # Criar imagem anotada (opcional, para debug)
            annotated_img = self.annotate_image(img, vehicle_detections)
            
            return {
                'total_vehicles': total_vehicles,
                'vehicle_counts': vehicle_counts,
                'detections': len(vehicle_detections),
                'confidence_avg': float(vehicle_detections['confidence'].mean()) if len(vehicle_detections) > 0 else 0.0,
                'annotated_image': annotated_img
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao detectar ve√≠culos em {image_path}: {e}")
            return None
    
    def annotate_image(self, img, detections):
        """Anota a imagem com as detec√ß√µes encontradas"""
        try:
            # Converter PIL para OpenCV
            img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            
            # Desenhar bounding boxes
            for _, detection in detections.iterrows():
                x1, y1, x2, y2 = int(detection['xmin']), int(detection['ymin']), int(detection['xmax']), int(detection['ymax'])
                class_id = int(detection['class'])
                confidence = detection['confidence']
                
                # Cor baseada no tipo de ve√≠culo
                color = (0, 255, 0) if class_id == 2 else (255, 0, 0)  # Verde para carros, vermelho para outros
                
                # Desenhar ret√¢ngulo
                cv2.rectangle(img_cv, (x1, y1), (x2, y2), color, 2)
                
                # Texto da label
                label = f"{self.vehicle_classes.get(class_id, 'vehicle')} {confidence:.2f}"
                cv2.putText(img_cv, label, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
            
            # Converter de volta para PIL
            annotated_pil = Image.fromarray(cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB))
            return annotated_pil
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao anotar imagem: {e}")
            return img
    
    def save_annotated_image(self, annotated_img, original_filename):
        """Salva a imagem anotada no diret√≥rio de resultados"""
        try:
            if annotated_img:
                result_filename = f"annotated_{original_filename}"
                result_path = os.path.join(self.results_dir, result_filename)
                annotated_img.save(result_path)
                logger.info(f"üíæ Imagem anotada salva: {result_path}")
                return result_filename
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar imagem anotada: {e}")
        return None
    
    def get_random_image(self):
        """Seleciona uma imagem aleat√≥ria do diret√≥rio"""
        try:
            images_dir = Path(self.base_dir)
            
            if not images_dir.exists():
                logger.error(f"‚ùå Diret√≥rio {self.base_dir} n√£o existe")
                return None
            
            # Buscar imagens
            image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.JPG', '*.JPEG', '*.PNG']
            image_files = []
            
            for extension in image_extensions:
                image_files.extend(images_dir.glob(extension))
            
            if not image_files:
                logger.warning(f"‚ö†Ô∏è Nenhuma imagem encontrada em {self.base_dir}")
                return None
            
            # Selecionar aleatoriamente
            selected_image = random.choice(image_files)
            logger.info(f"üé≤ Imagem selecionada aleatoriamente: {selected_image.name}")
            return selected_image
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao selecionar imagem aleat√≥ria: {e}")
            return None
    
    def publish_car_count(self, image_name, detection_result):
        """Publica resultado da contagem de carros via IPC"""
        try:
            if not self.ipc_client:
                logger.error("‚ùå Cliente IPC n√£o est√° conectado")
                return False

            message_data = {
                "timestamp": datetime.now().isoformat(),
                "component": self.component_name,
                "image_name": image_name,
                "vehicle_detection": {
                    "total_vehicles": detection_result['total_vehicles'],
                    "cars": detection_result['vehicle_counts'].get('car', 0),
                    "motorcycles": detection_result['vehicle_counts'].get('motorcycle', 0),
                    "buses": detection_result['vehicle_counts'].get('bus', 0),
                    "trucks": detection_result['vehicle_counts'].get('truck', 0),
                    "confidence_average": detection_result['confidence_avg']
                },
                "thing_name": "MeuCoreWSLDockerV2"
            }

            message_json = json.dumps(message_data, indent=2)

            publish_request = PublishToIoTCoreRequest(
                topic_name=self.topic,
                qos=QOS.AT_LEAST_ONCE,
                payload=bytes(message_json, "utf-8")
            )

            # Log resumido para o console
            cars_count = detection_result['vehicle_counts'].get('car', 0)
            total_count = detection_result['total_vehicles']
            
            logger.info(f"üì§ Publicando contagem no t√≥pico: {self.topic}")
            logger.info(f"üöó {image_name}: {cars_count} carros, {total_count} ve√≠culos totais")

            operation = self.ipc_client.new_publish_to_iot_core()
            operation.activate(publish_request)
            operation.get_response().result(timeout=10.0)

            logger.info("‚úÖ Contagem publicada com sucesso!")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erro ao publicar contagem: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    def run_car_counting_loop(self):
        """Loop principal de contagem de carros a cada 1 minuto"""
        logger.info("üöó Iniciando loop de contagem de carros - processamento a cada 60 segundos...")
        
        cycle_count = 1
        
        try:
            while True:
                logger.info(f"üîÑ Ciclo #{cycle_count} - Selecionando e processando imagem...")
                
                # Selecionar imagem aleat√≥ria
                selected_image = self.get_random_image()
                
                if selected_image:
                    # Detectar ve√≠culos
                    result = self.detect_vehicles(selected_image)
                    
                    if result:
                        # Salvar imagem anotada (opcional)
                        self.save_annotated_image(result['annotated_image'], selected_image.name)
                        
                        # Publicar resultado
                        success = self.publish_car_count(selected_image.name, result)
                        
                        if success:
                            cars = result['vehicle_counts'].get('car', 0)
                            total = result['total_vehicles']
                            logger.info(f"‚úÖ Ciclo #{cycle_count}: {cars} carros detectados de {total} ve√≠culos totais")
                        else:
                            logger.error(f"‚ùå Falha ao publicar resultado do ciclo #{cycle_count}")
                    else:
                        logger.error(f"‚ùå Falha na detec√ß√£o de ve√≠culos - ciclo #{cycle_count}")
                else:
                    logger.error(f"‚ùå N√£o foi poss√≠vel selecionar imagem - ciclo #{cycle_count}")
                
                cycle_count += 1
                
                # Aguardar 1 minuto antes do pr√≥ximo ciclo
                logger.info("‚è≥ Aguardando 60 segundos para pr√≥ximo ciclo...")
                time.sleep(60)
                
        except KeyboardInterrupt:
            logger.info("üõë Loop de contagem interrompido pelo usu√°rio")
        except Exception as e:
            logger.error(f"‚ùå Erro no loop de contagem: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    def run(self):
        """Loop principal do componente"""
        logger.info("üöÄ Iniciando componente CarCounterGreengrass...")
        
        # Estabelecer conex√£o IPC
        if not self.connect_ipc():
            logger.error("‚ùå Falha ao conectar IPC. Encerrando...")
            return
        
        # Carregar modelo YOLO
        if not self.load_yolo_model():
            logger.error("‚ùå Falha ao carregar modelo YOLO. Encerrando...")
            return
        
        logger.info("üéØ Componente inicializado com sucesso!")
        logger.info("üöó Modelo YOLO carregado - pronto para detectar ve√≠culos!")
        
        try:
            # Iniciar loop de contagem
            self.run_car_counting_loop()
                
        except KeyboardInterrupt:
            logger.info("üõë Componente interrompido pelo usu√°rio")
        except Exception as e:
            logger.error(f"‚ùå Erro no loop principal: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Limpeza de recursos"""
        logger.info("üßπ Realizando limpeza de recursos...")
        if self.ipc_client:
            try:
                logger.info("‚úÖ Limpeza conclu√≠da")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Erro durante limpeza: {e}")

def main():
    """Fun√ß√£o principal"""
    logger.info("=" * 60)
    logger.info("üöó AWS IoT Greengrass V2 - Car Counter Component v1.0.6")
    logger.info("=" * 60)
    
    try:
        # Criar e executar componente
        component = GreengrassCarCounter()
        component.run()
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal no componente: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()
